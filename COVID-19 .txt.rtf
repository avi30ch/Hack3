{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf610
{\fonttbl\f0\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;\red157\green0\blue210;\red255\green255\blue254;\red0\green0\blue0;
\red0\green0\blue255;\red144\green1\blue18;\red101\green76\blue29;\red0\green0\blue109;\red15\green112\blue1;
\red19\green120\blue72;\red255\green255\blue254;\red19\green120\blue72;\red157\green0\blue210;\red144\green1\blue18;
\red101\green76\blue29;\red15\green112\blue1;}
{\*\expandedcolortbl;;\cssrgb\c68627\c0\c85882;\cssrgb\c100000\c100000\c99608;\cssrgb\c0\c0\c0;
\cssrgb\c0\c0\c100000;\cssrgb\c63922\c8235\c8235;\cssrgb\c47451\c36863\c14902;\cssrgb\c0\c6275\c50196;\cssrgb\c0\c50196\c0;
\cssrgb\c3529\c53333\c35294;\cssrgb\c100000\c100000\c99608;\cssrgb\c3529\c53333\c35294;\cssrgb\c68627\c0\c85882;\cssrgb\c63922\c8235\c8235;
\cssrgb\c47451\c36863\c14902;\cssrgb\c0\c50196\c0;}
\margl1440\margr1440\vieww28600\viewh15380\viewkind0
\deftab720
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs28 \cf2 \cb3 \expnd0\expndtw0\kerning0
import\cf4  numpy \cf2 as\cf4  np\cb1 \
\cf2 \cb3 import\cf4  pandas \cf2 as\cf4  pd\cb1 \
\cf2 \cb3 import\cf4  os\cb1 \
\cf2 \cb3 from\cf4  sklearn.linear_model \cf2 import\cf4  LinearRegression\cb1 \
\cf2 \cb3 from\cf4  sklearn.model_selection \cf2 import\cf4  train_test_split\cb1 \
\cf2 \cb3 import\cf4  matplotlib.pyplot \cf2 as\cf4  plt\cb1 \
\pard\pardeftab720\sl380\partightenfactor0
\cf5 \cb3 %matplotlib \cf4 inline\
\pard\pardeftab720\sl380\partightenfactor0
\cf4 \cb1 \
\cf2 \cb3 import\cf4  seaborn \cf2 as\cf4  sns\cb1 \
\cf2 \cb3 from\cf4  sklearn \cf2 import\cf4  metrics\cb1 \
\cf2 \cb3 import\cf4  seaborn \cf2 as\cf4  seabornInstance \cb1 \
\cf2 \cb3 from\cf4  statsmodels.tsa.api \cf2 import\cf4  VAR\cb1 \
\cf2 \cb3 from\cf4  statsmodels.tsa.stattools \cf2 import\cf4  adfuller\cb1 \
\cf2 \cb3 from\cf4  statsmodels.tools.eval_measures \cf2 import\cf4  rmse, aic\
\
url = \cf6 'https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv'\cf4 \cb1 \
\cb3 df1 = pd.read_csv(url)\cb1 \
\cb3 use_states = [\cf6 'Texas'\cf4 ,\cf6 'Illinois'\cf4 ,\cf6 'California'\cf4 ,\cf6 'Georgia'\cf4 ,\cf6 'Newyork'\cf4 , \cf6 'Kentucky'\cf4 , \cf6 'Ohio'\cf4 , \cf6 'Alabama'\cf4 , \cf6 'Pennsylvania'\cf4 , \cf6 'Missouri'\cf4 , \cf6 'South Carolina'\cf4 ]\cb1 \
\cb3 df1 = df1.drop(columns = \cf6 "fips"\cf4 )\cb1 \
\cb3 df1 = df1[df1.state.isin(use_states)]\cb1 \
\
\pard\pardeftab720\sl380\partightenfactor0
\cf5 \cb3 def\cf4  \cf7 stateDF\cf4 (\cf8 stateName\cf4 ):\cb1 \
\pard\pardeftab720\sl380\partightenfactor0
\cf4 \cb3   df2 = df1[df1[\cf6 'state'\cf4 ]==stateName].groupby(\cf6 'date'\cf4 ).\cf7 sum\cf4 ()\cb1 \
\cb3   \cf9 #df_georgia = df1[df1['state']=='Georgia'].groupby('date').sum()\cf4 \cb1 \
\cb3   \cf9 #df_kentucky = df1[df1['state']=='Kentucky'].groupby('date').sum()\cf4 \cb1 \
\cb3   \cf2 return\cf4  df2\cb1 \
\
\pard\pardeftab720\sl380\partightenfactor0
\cf5 \cb3 def\cf4  \cf7 changeDeaths\cf4 (\cf8 stateName\cf4 ):\cb1 \
\pard\pardeftab720\sl380\partightenfactor0
\cf4 \cb3   df2 = stateDF(stateName)\cb1 \
\cb3   df2.drop(df2.head(\cf10 80\cf4 ).index, inplace=\cf5 True\cf4 )\cb1 \
\cb3   df2[\cf6 'one week'\cf4 ] = df2[\cf6 'deaths'\cf4 ].shift(\cf10 -7\cf4 )\cb1 \
\cb3   df2.dropna()\cb1 \
\cb3   model = LinearRegression()\cb1 \
\cb3   X_data = df2[\cf6 'cases'\cf4 ].to_numpy()\cb1 \
\cb3   Y_data = df2[\cf6 'deaths'\cf4 ].to_numpy()\cb1 \
\cb3   df3 = df2\cb1 \
\cb3   df3 = df3.shift(\cf10 -1\cf4 )\cb1 \
\cb3   df3 = df3 - df2\cb1 \
\cb3   X1_data = df3[\cf6 'cases'\cf4 ].to_numpy()\cb1 \
\cb3   Y1_data = df3[\cf6 'deaths'\cf4 ].to_numpy()\cb1 \
\cb3   Y1_data = Y1_data[:\cf10 -1\cf4 ]\cb1 \
\cb3   X1_data = X1_data[:\cf10 -1\cf4 ]\cb1 \
\cb3   seq_length = \cf10 14\cf4 \cb1 \
\cb3   num_examples1 = X1_data.shape[\cf10 0\cf4 ] - seq_length\cb1 \
\cb3   num_example = X1_data.shape[\cf10 0\cf4 ] - \cf10 2\cf4 *seq_length\cb1 \
\cb3   X1_res = np.zeros((num_example, \cf10 1\cf4 ))\cb1 \
\cb3   Y1_res = np.zeros((num_example, \cf10 1\cf4 ))\cb1 \
\cb3   X1_test = np.zeros((seq_length, \cf10 1\cf4 ))\cb1 \
\cb3   Y1_test = np.zeros((seq_length, \cf10 1\cf4 ))\cb1 \
\cb3   \cf2 for\cf4  i \cf5 in\cf4  \cf7 range\cf4 (num_example):\cb1 \
\cb3     X1_res[i,:seq_length] = X1_data[i : i+\cf10 1\cf4 ]\cb1 \
\cb3     Y1_res[i, :seq_length] = Y1_data[i : i+\cf10 1\cf4 ]\cb1 \
\cb3   \cf2 for\cf4  j \cf5 in\cf4  \cf7 range\cf4 (seq_length):\cb1 \
\cb3     X1_test[j, :] = X1_data[j+num_examples1-seq_length : j+num_examples1-seq_length+\cf10 1\cf4 ]\cb1 \
\cb3     Y1_test[j, :] = Y1_data[j+num_examples1-seq_length : j+num_examples1-seq_length+\cf10 1\cf4 ]\cb1 \
\cb3   model.fit(X1_res, Y1_res)\cb1 \
\cb3   y1_pred = model.predict(X1_test)\cb1 \
\cb3   \cf2 return\cf4  y1_pred\cb1 \
\cb3 changeDeaths(\cf6 'California'\cf4 )\
\
\
\pard\pardeftab720\sl380\partightenfactor0
\cf5 def\cf4  \cf7 getDataForScenarios\cf4 (\cf8 state_name\cf4 ):\cb1 \
\pard\pardeftab720\sl380\partightenfactor0
\cf4 \cb3  df2 = stateDF(state_name)\cb1 \
\cb3  X_data = df2[\cf6 'cases'\cf4 ].to_numpy()\cb1 \
\cb3  Y_data = df2[\cf6 'deaths'\cf4 ].to_numpy()\cb1 \
\cb3  seq_length = \cf10 14\cf4 \cb1 \
\cb3  y1_pred = changeDeaths(state_name)\cb1 \
\cb3  yarray = np.zeros((y1_pred.shape[\cf10 0\cf4 ]))\cb1 \
\cb3  ytotal = np.zeros((y1_pred.shape[\cf10 0\cf4 ]))\cb1 \
\cb3  ytotal1 = np.zeros((y1_pred.shape[\cf10 0\cf4 ]))\cb1 \
\cb3  ytotal0 = np.zeros((y1_pred.shape[\cf10 0\cf4 ]))\cb1 \
\cb3  datel = pd.date_range(start=\cf6 "2020-06-10"\cf4 ,end=\cf6 "2020-06-23"\cf4 )\cb1 \
\cb3  \cf9 #print(datel)\cf4 \cb1 \
\cb3  temp = Y_data[-seq_length]\cb1 \
\cb3  temp1 = temp\cb1 \
\cb3  temp0 = temp\cb1 \
\cb3  \cf2 for\cf4  i \cf5 in\cf4  \cf7 range\cf4 (y1_pred.shape[\cf10 0\cf4 ]):\cb1 \
\cb3     yarray[i] = i\cb1 \
\cb3     ytotal[i] = temp + y1_pred[i]\cb1 \
\cb3     ytotal1[i] = temp1 + y1_pred[i]*\cf10 0.35\cf4 \cb1 \
\cb3     temp = ytotal[i]\cb1 \
\cb3     temp1 = ytotal1[i]\cb1 \
\cb3     ytotal0[i] = temp0 + y1_pred[i]*\cf10 1.3\cf4 \cb1 \
\cb3     temp0 = ytotal0[i]\cb1 \
\
\cb3  x1 = plt.plot(datel, ytotal, color = \cf6 'r'\cf4 , label = \cf6 'Normal'\cf4  )\cb1 \
\cb3  x2 = plt.plot(datel, ytotal1, color = \cf6 'b'\cf4 , label = \cf6 'MoreMasks'\cf4 )\cb1 \
\cb3  x3 = plt.plot(datel, ytotal0, color = \cf6 'g'\cf4 , label = \cf6 'LessMasks'\cf4 )\cb1 \
\cb3  plt.tick_params(axis=\cf6 'x'\cf4 , which=\cf6 'major'\cf4 , labelsize=\cf10 8\cf4 )\cb1 \
\cb3  plt.xlabel(\cf6 'Date'\cf4 )\cb1 \
\cb3  plt.ylabel(\cf6 'Deaths'\cf4 )\cb1 \
\cb3  plt.legend()\cb1 \
\cb3  \cf9 #plt.legend((x1, x2, x3), ('label1', 'label2', 'label3'))\cf4 \cb1 \
\cb3 getDataForScenarios(\cf6 'California'\cf4 )\
\
\pard\pardeftab720\sl380\partightenfactor0
\cf4 \cb11 \outl0\strokewidth0 \strokec4 lookback = \cf12 \strokec12 14\cf4 \cb1 \strokec4 \
\cb11 pred_shift = \cf12 \strokec12 -7\cf4 \cb1 \strokec4 \
\cb11 states = []\cb1 \
\cb11 Xs = []\cb1 \
\cb11 ys = []\cb1 \
\cf13 \cb11 \strokec13 for\cf4 \strokec4  state \cf5 \strokec5 in\cf4 \strokec4  df[\cf14 \strokec14 'state'\cf4 \strokec4 ].unique():\cb1 \
\cb11   states.append(state)\cb1 \
\cb11   cur_df = df[df.state == state]\cb1 \
\cb11   cur_df[\cf14 \strokec14 'label'\cf4 \strokec4 ] = cur_df[\cf14 \strokec14 'deaths'\cf4 \strokec4 ].shift(pred_shift)\cb1 \
\cb11   X_raw = cur_df[[\cf14 \strokec14 'deaths'\cf4 \strokec4 ,\cf14 \strokec14 'cases'\cf4 \strokec4 ]].to_numpy()[:pred_shift,:]\cb1 \
\cb11   y_raw = cur_df[\cf14 \strokec14 'label'\cf4 \strokec4 ].to_numpy()[:pred_shift]\cb1 \
\cb11   num_examples = X_raw.shape[\cf12 \strokec12 0\cf4 \strokec4 ] - lookback\cb1 \
\cb11   X_use = np.zeros((num_examples, lookback, \cf12 \strokec12 2\cf4 \strokec4 ))\cb1 \
\cb11   y_use = y_raw[lookback:]\cb1 \
\cb11   \cf13 \strokec13 for\cf4 \strokec4  i \cf5 \strokec5 in\cf4 \strokec4  \cf15 \strokec15 range\cf4 \strokec4 (num_examples):\cb1 \
\cb11     X_use[i,:,:] = X_raw[i:i+lookback,:]\cb1 \
\cb11   Xs.append(X_use)\cb1 \
\cb11   ys.append(y_use)\cb1 \
\
\
\cb11 min_points = \cf12 \strokec12 100\cf4 \cb1 \strokec4 \
\cb11 mses = []\cb1 \
\cf13 \cb11 \strokec13 for\cf4 \strokec4  i \cf5 \strokec5 in\cf4 \strokec4  \cf15 \strokec15 range\cf4 \strokec4 (\cf15 \strokec15 len\cf4 \strokec4 (Xs)):\cb1 \
\cb11   X_all = Xs[i]\cb1 \
\cb11   y_all = ys[i]\cb1 \
\cb11   \cf13 \strokec13 if\cf4 \strokec4  X_all.shape[\cf12 \strokec12 0\cf4 \strokec4 ] < min_points:\cb1 \
\cb11     \cf13 \strokec13 continue\cf4 \cb1 \strokec4 \
\cb11   X_all = X_all.astype(\cf14 \strokec14 'float32'\cf4 \strokec4 )\cb1 \
\cb11   y_all = y_all.astype(\cf14 \strokec14 'float32'\cf4 \strokec4 )\cb1 \
\cb11   test_frac = \cf12 \strokec12 0.1\cf4 \cb1 \strokec4 \
\cb11   test_num = int(test_frac * X_all.shape[\cf12 \strokec12 0\cf4 \strokec4 ])\cb1 \
\cb11   X_keras_train = X_all[:-test_num,:,:]\cb1 \
\cb11   X_reg_train = X_keras_train[:,:,\cf12 \strokec12 0\cf4 \strokec4 ].reshape((X_keras_train.shape[\cf12 \strokec12 0\cf4 \strokec4 ], X_keras_train.shape[\cf12 \strokec12 1\cf4 \strokec4 ])) \cb1 \
\cb11   \cf16 \strokec16 #X_keras_train.reshape((X_keras_train.shape[0], X_keras_train.shape[1] * X_keras_train.shape[2]))\cf4 \cb1 \strokec4 \
\cb11   y_train = y_all[:-test_num]\cb1 \
\cb11   X_keras_test = X_all[-test_num:,:]\cb1 \
\cb11   \cf16 \strokec16 #X_reg_test = X_keras_test.reshape((X_keras_test.shape[0], X_keras_test.shape[1] * X_keras_test.shape[2]))\cf4 \cb1 \strokec4 \
\cb11   X_reg_test = X_keras_test[:,:,\cf12 \strokec12 0\cf4 \strokec4 ].reshape((X_keras_test.shape[\cf12 \strokec12 0\cf4 \strokec4 ], X_keras_test.shape[\cf12 \strokec12 1\cf4 \strokec4 ])) \cb1 \
\cb11   y_test = y_all[-test_num:]\cb1 \
\cb11   model = LinearRegression()\cb1 \
\cb11   model.fit(X_reg_train,y_train)\cb1 \
\cb11   preds = model.predict(X_reg_test)\cb1 \
\cb11   mse = int(metrics.mean_squared_error(y_test, preds))\cb1 \
\cb11   mses.append((states[i],mse))\cb1 \
\cb11   plt.plot(\cf15 \strokec15 range\cf4 \strokec4 (y_test.shape[\cf12 \strokec12 0\cf4 \strokec4 ]),y_test,color=\cf14 \strokec14 'blue'\cf4 \strokec4 )\cb1 \
\cb11   plt.plot(\cf15 \strokec15 range\cf4 \strokec4 (y_test.shape[\cf12 \strokec12 0\cf4 \strokec4 ]),preds,color=\cf14 \strokec14 'red'\cf4 \strokec4 )\cb1 \
\cb11   plt.title(states[i])\cb1 \
\cb11   plt.ylabel(\cf14 \strokec14 'Num deaths'\cf4 \strokec4 )\cb1 \
\cb11   plt.xlabel(\cf14 \strokec14 'Day T (not necessarily consecutive)'\cf4 \strokec4 )\cb1 \
\cb11   plt.legend(labels=[\cf14 \strokec14 'true_labels'\cf4 \strokec4 ,\cf14 \strokec14 'predictions'\cf4 \strokec4 ])\cb1 \
\cb11   plt.show()\cb1 \
\
\pard\pardeftab720\sl380\partightenfactor0
\cf4 \outl0\strokewidth0 \
\
\
}